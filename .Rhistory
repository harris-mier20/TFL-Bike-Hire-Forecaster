)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary and plot
means <- tmin_summary[3, ]
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[1, ]
polygon2
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary and plot
means <- tmin_summary[4, ]
polygon <- tmin_summary[3, ]
polygon2 <- tmin_summary[2, ]
polygon2
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary and plot
means <- tmin_summary[4, ]
polygon <- tmin_summary[3, ]
polygon2 <- tmin_summary[2, ]
tmin_summary
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary and plot
means <- tmin_summary[4, ]
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
polygon <- c(polygon, rev(polygon2))
polygon
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary and plot
means <- tmin_summary[4, ]
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
polygon <- c(polygon, rev(polygon2))
# Create a list of values from 1 to 12 and then from 12 to 1
combined_sequence <- c(1:12, 12:1)
# Print the combined sequence
print(combined_sequence)
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
polygon <- c(polygon, rev(polygon2))
months <- c(1:12, 12:1)
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
polygon <- c(polygon, rev(polygon2))
months_numerical <- c(1:12, 12:1)
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
polygon(months_numerial, polygon, col = "blue")
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
y <- c(polygon, rev(polygon2))
x <- c(1:12, 12:1)
#plot the means
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
polygon(x, y, col = "blue")
# Set x-axis labels
axis(1, at = 1:12, labels = months)
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
y <- c(polygon, rev(polygon2))
x <- c(1:12, 12:1)
#plot the means
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
polygon(x, y, col=rgb(1,0,0,0.2))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
library(shiny); runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-data-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-data-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/app-weather-statistics-v1.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
View(ec1_data)
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
every_500th
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
View(ec1_data)
length(ec1_data)
length(ec1_data$Date)
ec1_data$Date[1321]
ec1_data$Date[1321*3/4]
ec1_data$Date[1321*2/4]
ec1_data$Date[1321*2/3]
ec1_data$Date[1321*1/3]
ec1_data$Date[1]
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
rm(list = ls())
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
rm(list = ls())
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
