# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
polygon <- c(polygon, rev(polygon2))
months_numerical <- c(1:12, 12:1)
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
polygon(months_numerial, polygon, col = "blue")
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
y <- c(polygon, rev(polygon2))
x <- c(1:12, 12:1)
#plot the means
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
polygon(x, y, col = "blue")
# Set x-axis labels
axis(1, at = 1:12, labels = months)
#load weather data
WeatherData <- read.csv("http://pierrepinson.com/wp-content/uploads/2023/10/Heathrow-weather-data-1948-2022.csv", header=TRUE)
# define the axis labels for months
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
y <- c(polygon, rev(polygon2))
x <- c(1:12, 12:1)
#plot the means
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
polygon(x, y, col=rgb(1,0,0,0.2))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
library(shiny); runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-data-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-data-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/app-weather-statistics-v1.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(lubridate)
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
#splits a data frame into a new data frame containing only the locations within a
#a postcode area
listofdataframes <- list()
library(lubridate)
library(data.table)
library(dplyr)
library(ggplot2)
#set the wd
#setwd("C:/Users/Rory.Bateman/OneDrive/Documents/GitHub/TFL-Bike-Hire-Forecaster")
dailyactivity <- read.csv("tfl-bike-daily-activity-central-london.csv")
sewd("/Users/Harris/Desktop/TFL-Bike-Hire-Forecaster")
setwd("/Users/Harris/Desktop/TFL-Bike-Hire-Forecaster")
library(lubridate)
library(data.table)
library(dplyr)
library(ggplot2)
#set the wd
#setwd("C:/Users/Rory.Bateman/OneDrive/Documents/GitHub/TFL-Bike-Hire-Forecaster")
dailyactivity <- read.csv("tfl-bike-daily-activity-central-london.csv")
#Getting a list of all stations within London along with their postcodes
stationinfo <- read.csv("station-postcodes-central.csv")
#defining which postcodes are to be included in the output dataset c("W1","WC","EC")(all central london postcode first two letters)
twol <- c("EC1","EC2","EC3","EC4","WC1","WC2")
# inputs a list of stations with their postcodes and a list of the postcode
#areas you would like to include outputs a data frame of the stations within those
# postcodes along with a shortened form of their postcode
stationexrtraction.postcode <- function(stationset,postcodes){
# reformatting postcodes to only include first three digits
stationset <- mutate(stationset,Postcode = substr(Postcode,0,nchar(postcodes[1])))
stationset.postcode <-stationset$Postcode
# creating a blank dataset to be filled with only the stations within the predefined postcode list
stationset.filtered <- data.frame(X=character(),
Station=character(),
Postcode=character(),
Number=character(),
stringsAsFactors=FALSE)
# runs through each station within station info and adding ones that lie within
# the predefined area to the new station info list
n  <- 0
for (i in 1:nrow(stationset)) {
if (stationset.postcode[i] %in% postcodes){
n <- n +1
stationset.filtered[nrow(stationset.filtered) + 1,] = stationset[i,]
}
else{
}
}
return(stationset.filtered)
}
#inputs a list of stations with their postcodes and a list of the postcode
#areas you would like to include. Outputs a list of the defined postcode
#areas which with a sub list of all stations within that area
stationexrtraction.list <- function(stationset,postcodes){
postcodestations <- list()
for(i in 1:length(postcodes)){
postcodestations[postcodes[i]] <- list(make.names(stationexrtraction.postcode(stationset,postcodes[i])$Station, unique=TRUE))
}
return(postcodestations)
}
stationinfon <- stationexrtraction.list(stationinfo,twol)
#splits a data frame into a new data frame containing only the locations within a
#a postcode area
listofdataframes <- list()
ls <- list()
i = 1
for( i in 1:length(stationinfon)){
ls <- append(stationinfon[[i]], "Date", after = 0)
listofdataframes[[i]] <- dailyactivity[ls]
}
i = 1
postcode.activity<- data.frame(matrix(NA, nrow = 1321, ncol = 0))
dailyactivity.date <- data.frame()
for( i in 1:length(stationinfon)){
df <- listofdataframes[[i]]
dailyactivity.date <- as.Date(df$Date,format = "%d/%m/%Y")
postcode.activity["Date"] <- dailyactivity.date
df <- df[-c(1)]
listofdataframes[[i]]
df <- rowSums(df)
postcode.activity[twol[i]] <- df
}
postcode.activity.means <-colMeans(postcode.activity[-c(1,8)])
postcode.activity.standarddeviation <- sapply(postcode.activity[-c(1,8)], sd)
postcode.activity["weekday"] <- weekdays(postcode.activity$Date)
ggplot(postcode.activity) +geom_point(aes(Date, WC1,color=ifelse(weekday %in% c("Friday","Saturday","Sunday"), 'red', 'black')))+ theme(legend.position="none")
View(postcode.activity)
library(lubridate)
library(data.table)
library(dplyr)
library(ggplot2)
#set the wd
#setwd("C:/Users/Rory.Bateman/OneDrive/Documents/GitHub/TFL-Bike-Hire-Forecaster")
dailyactivity <- read.csv("tfl-bike-daily-activity-central-london.csv")
#Getting a list of all stations within London along with their postcodes
stationinfo <- read.csv("station-postcodes-central.csv")
#defining which postcodes are to be included in the output dataset c("W1","WC","EC")(all central london postcode first two letters)
twol <- c("EC1","EC2","EC3","EC4","WC1","WC2")
# inputs a list of stations with their postcodes and a list of the postcode
#areas you would like to include outputs a data frame of the stations within those
# postcodes along with a shortened form of their postcode
stationexrtraction.postcode <- function(stationset,postcodes){
# reformatting postcodes to only include first three digits
stationset <- mutate(stationset,Postcode = substr(Postcode,0,nchar(postcodes[1])))
stationset.postcode <-stationset$Postcode
# creating a blank dataset to be filled with only the stations within the predefined postcode list
stationset.filtered <- data.frame(X=character(),
Station=character(),
Postcode=character(),
Number=character(),
stringsAsFactors=FALSE)
# runs through each station within station info and adding ones that lie within
# the predefined area to the new station info list
n  <- 0
for (i in 1:nrow(stationset)) {
if (stationset.postcode[i] %in% postcodes){
n <- n +1
stationset.filtered[nrow(stationset.filtered) + 1,] = stationset[i,]
}
else{
}
}
return(stationset.filtered)
}
#inputs a list of stations with their postcodes and a list of the postcode
#areas you would like to include. Outputs a list of the defined postcode
#areas which with a sub list of all stations within that area
stationexrtraction.list <- function(stationset,postcodes){
postcodestations <- list()
for(i in 1:length(postcodes)){
postcodestations[postcodes[i]] <- list(make.names(stationexrtraction.postcode(stationset,postcodes[i])$Station, unique=TRUE))
}
return(postcodestations)
}
stationinfon <- stationexrtraction.list(stationinfo,twol)
#splits a data frame into a new data frame containing only the locations within a
#a postcode area
listofdataframes <- list()
ls <- list()
i = 1
for( i in 1:length(stationinfon)){
ls <- append(stationinfon[[i]], "Date", after = 0)
listofdataframes[[i]] <- dailyactivity[ls]
}
i = 1
postcode.activity<- data.frame(matrix(NA, nrow = 1321, ncol = 0))
dailyactivity.date <- data.frame()
for( i in 1:length(stationinfon)){
df <- listofdataframes[[i]]
dailyactivity.date <- as.Date(df$Date,format = "%d/%m/%Y")
postcode.activity["Date"] <- dailyactivity.date
df <- df[-c(1)]
listofdataframes[[i]]
df <- rowSums(df)
postcode.activity[twol[i]] <- df
}
postcode.activity.means <-colMeans(postcode.activity[-c(1,8)])
postcode.activity.standarddeviation <- sapply(postcode.activity[-c(1,8)], sd)
#add the weekday information to the data frame
postcode.activity["Weekday"] <- weekdays(postcode.activity$Date)
#plot the data to see any relationships and export the data
ggplot(postcode.activity) +geom_point(aes(Date, WC1,color=ifelse(weekday %in% c("Friday","Saturday","Sunday"), 'red', 'black')))+ theme(legend.position="none")
library(lubridate)
library(data.table)
library(dplyr)
library(ggplot2)
#set the wd
#setwd("C:/Users/Rory.Bateman/OneDrive/Documents/GitHub/TFL-Bike-Hire-Forecaster")
dailyactivity <- read.csv("tfl-bike-daily-activity-central-london.csv")
#Getting a list of all stations within London along with their postcodes
stationinfo <- read.csv("station-postcodes-central.csv")
#defining which postcodes are to be included in the output dataset c("W1","WC","EC")(all central london postcode first two letters)
twol <- c("EC1","EC2","EC3","EC4","WC1","WC2")
# inputs a list of stations with their postcodes and a list of the postcode
#areas you would like to include outputs a data frame of the stations within those
# postcodes along with a shortened form of their postcode
stationexrtraction.postcode <- function(stationset,postcodes){
# reformatting postcodes to only include first three digits
stationset <- mutate(stationset,Postcode = substr(Postcode,0,nchar(postcodes[1])))
stationset.postcode <-stationset$Postcode
# creating a blank dataset to be filled with only the stations within the predefined postcode list
stationset.filtered <- data.frame(X=character(),
Station=character(),
Postcode=character(),
Number=character(),
stringsAsFactors=FALSE)
# runs through each station within station info and adding ones that lie within
# the predefined area to the new station info list
n  <- 0
for (i in 1:nrow(stationset)) {
if (stationset.postcode[i] %in% postcodes){
n <- n +1
stationset.filtered[nrow(stationset.filtered) + 1,] = stationset[i,]
}
else{
}
}
return(stationset.filtered)
}
#inputs a list of stations with their postcodes and a list of the postcode
#areas you would like to include. Outputs a list of the defined postcode
#areas which with a sub list of all stations within that area
stationexrtraction.list <- function(stationset,postcodes){
postcodestations <- list()
for(i in 1:length(postcodes)){
postcodestations[postcodes[i]] <- list(make.names(stationexrtraction.postcode(stationset,postcodes[i])$Station, unique=TRUE))
}
return(postcodestations)
}
stationinfon <- stationexrtraction.list(stationinfo,twol)
#splits a data frame into a new data frame containing only the locations within a
#a postcode area
listofdataframes <- list()
ls <- list()
i = 1
for( i in 1:length(stationinfon)){
ls <- append(stationinfon[[i]], "Date", after = 0)
listofdataframes[[i]] <- dailyactivity[ls]
}
i = 1
postcode.activity<- data.frame(matrix(NA, nrow = 1321, ncol = 0))
dailyactivity.date <- data.frame()
for( i in 1:length(stationinfon)){
df <- listofdataframes[[i]]
dailyactivity.date <- as.Date(df$Date,format = "%d/%m/%Y")
postcode.activity["Date"] <- dailyactivity.date
df <- df[-c(1)]
listofdataframes[[i]]
df <- rowSums(df)
postcode.activity[twol[i]] <- df
}
postcode.activity.means <-colMeans(postcode.activity[-c(1,8)])
postcode.activity.standarddeviation <- sapply(postcode.activity[-c(1,8)], sd)
#add the weekday information to the data frame
postcode.activity["Weekday"] <- weekdays(postcode.activity$Date)
#plot the data to see any relationships and export the data
ggplot(postcode.activity) +geom_point(aes(Date, WC1,color=ifelse(weekday %in% c("Friday","Saturday","Sunday"), 'red', 'black')))+ theme(legend.position="none")
write.csv(postcode.activity, "daily-activity-by-postcode.csv")
data <- read.csv("daily-activity-by-postcode.csv")
View(data)
activity_means <-colMeans(data[-c(1,8)])
View(dailyactivity)
activity_means <-colMeans(data[3:8])
activity_means
postcode_labels <- colnames(data)
postcode_labels <- colnames(data)[3:8]
postcode_labels
activity_sd <- sapply(postcode.activity[3:8], data)
activity_sd <- sapply(data[3:8], sd)
rm()
rm(list = ls())
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#create a new data frame to store the satistics for each central london postcode
postcode_labels <- colnames(data)[3:8]
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(2,3)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- colnames(data)[3:8]
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- colnames(data)[3:8]
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
View(postcode_statistics)
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
View(postcode_statistics)
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
runApp('app-master.R')
