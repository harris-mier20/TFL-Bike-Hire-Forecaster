#Extract tmin and tmax and reshape them to become matrices
#where each line is for a month, and each column is for a year
# and find mean of each month
tmin.vect <- WeatherData$tmin
dim(tmin.vect) <- c(12, length(tmin.vect)/12)
tmax.vect <- WeatherData$tmax
dim(tmax.vect) <- c(12, length(tmax.vect)/12)
# Calculate standard deviation and quantiles for tmin.vect
# apply function to apply an function to each row of the vector
# all info stored in tmin_summary
tmin_summary <- apply(tmin.vect, 1, function(x) {
# The c() function in the code is used to concatenate or
#combine the results of the standard deviation and quantiles
#and mean into a single vector
c(
# calculate standard deviation of each row
sd(x),
# calculate the quartiles of each row
#again, c() used to combine the quartiles into a single vector
quantile(x, c(0.05, 0.95)),
#calculate the mean of each month
mean(x)
)
})
#repeat for tmax
tmax_summary <- apply(tmax.vect, 1, function(x) {
c(
sd(x),
quantile(x, c(0.05, 0.95)),
mean(x)
)
})
# Extract the means from tmin_summary
means <- tmin_summary[4, ]
#extact the quarltiles and build the polygon coordinates
polygon <- tmin_summary[2, ]
polygon2 <- tmin_summary[3, ]
y <- c(polygon, rev(polygon2))
x <- c(1:12, 12:1)
#plot the means
plot(means, type="l", col="blue", xaxt = "n", xlab = "", ylab = "",
ylim = c(-3, 22))
polygon(x, y, col=rgb(1,0,0,0.2))
# Set x-axis labels
axis(1, at = 1:12, labels = months)
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/mastering-shiny-exercises.R')
library(shiny); runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-data-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-data-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/app-weather-statistics-v1.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
runApp('Desktop/DE4/Data to Product/Tutorial 2/weather-dashboard.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
library(shiny); runApp('Desktop/TFL-Bike-Hire-Forecaster/app-master.R')
View(data)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
setwd("/Users/Harris/Desktop/TFL-Bike-Hire-Forecaster")
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
View(data)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
raw_wc1 <- data$WC1
dates <- data$Date
plot(raw_wc1)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
raw_wc1 <- data$WC1
dates <- data$Date
#use holt winter exponential smoothing
hw_model <- HoltWinters(ts_raw_wc1, beta = FALSE, gamma = FALSE)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
raw_wc1 <- data$WC1
dates <- data$Date
#use holt winter exponential smoothing
hw_model <- HoltWinters(raw_wc1, beta = FALSE, gamma = FALSE)
smoothed_values <- forecast(hw_model, h = length(raw_wc1))
library(forecast)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
raw_wc1 <- data$WC1
dates <- data$Date
#use holt winter exponential smoothing
hw_model <- HoltWinters(raw_wc1, beta = FALSE, gamma = FALSE)
smoothed_values <- forecast(hw_model, h = length(raw_wc1))
smooth_wc1 <- as.vector(smoothed_values$mean)
plot(smooth_wc1)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.5, 2000)
plot(smooth_wc1)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.2, 2000)
plot(smooth_wc1)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.1, 2000)
plot(smooth_wc1)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.1, 2000)
wc1_data <- data.frame("Date" = dates,
"Raw" = raw_wc1,
"Smooth" = smooth_wc1)
View(wc1_data)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.1, 2000)
wc1_data <- data.frame("Date" = dates,
"Raw" = raw_wc1,
"Smooth" = smooth_wc1)
#create a data frame with the data for WC2
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC2
smooth_wc2 <- smooth_data(raw_wc2, 0.1, 2000)
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.1, 2000)
wc1_data <- data.frame("Date" = dates,
"Raw" = raw_wc1,
"Smooth" = smooth_wc1)
#create a data frame with the data for WC2
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc2 <- data$WC2
smooth_wc2 <- smooth_data(raw_wc2, 0.1, 2000)
wc2_data <- data.frame("Date" = dates,
"Raw" = raw_wc2,
"Smooth" = smooth_wc2)
plot(smooth_wc2)
library(shiny); runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
View(wc2_data)
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
runApp('app-master.R')
# Read the data from the CSV files and extract the station names
data <- read.csv("daily-activity-by-postcode.csv")
#collect data on all stations
postcode_labels <- c("ec1","ec2","ec3","ec4","wc1","wc2")
activity_means <-colMeans(data[3:8])
activity_sd <- sapply(data[3:8], sd)
n_stations <- c(29,23,9,14,29,23)
#round the data
activity_means <- round(activity_means, digits = 0)
activity_sd <- round(activity_sd, digits = 0)
#create data frame with statistics on each station
postcode_statistics <- data.frame("Postcode" = postcode_labels,
"Stations" = n_stations,
"Mean" = activity_means,
"SD"=activity_sd)
#define function to smooth the data with exponential smoothing
smooth_data <- function(data,alpha,starting_value){
#define parameters
aa <- alpha
l0 <- starting_value
#initiate vector to store smoothed data
smoothed_data <- numeric(length(data))
#loop through the data and perform exponential smoothing
for (i in 1:length(smoothed_data)) {
smoothed_data[i] <- aa * data[i] + (1 - aa) * l0
l0 <- smoothed_data[i]
}
return(smoothed_data)
}
#create a data frame with the data for WC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc1 <- data$WC1
smooth_wc1 <- smooth_data(raw_wc1, 0.1, 2000)
wc1_data <- data.frame("Date" = dates,
"Raw" = raw_wc1,
"Smooth" = smooth_wc1)
#create a data frame with the data for WC2
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_wc2 <- data$WC2
smooth_wc2 <- smooth_data(raw_wc2, 0.1, 2000)
wc2_data <- data.frame("Date" = dates,
"Raw" = raw_wc2,
"Smooth" = smooth_wc2)
#create a data frame with the data for EC1
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_ec1 <- data$EC1
smooth_ec1 <- smooth_data(raw_ec1, 0.1, 2000)
ec1_data <- data.frame("Date" = dates,
"Raw" = raw_ec1,
"Smooth" = smooth_ec1)
#create a data frame with the data for EC2
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_ec2 <- data$EC2
smooth_ec2 <- smooth_data(raw_ec2, 0.1, 2000)
ec2_data <- data.frame("Date" = dates,
"Raw" = raw_ec2,
"Smooth" = smooth_ec2)
#create a data frame with the data for EC3
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_ec3 <- data$EC3
smooth_ec3 <- smooth_data(raw_ec3, 0.1, 2000)
ec3_data <- data.frame("Date" = dates,
"Raw" = raw_ec3,
"Smooth" = smooth_ec3)
#create a data frame with the data for EC4
#one column for the data, one column for the smoothed data
dates <- data$Date
raw_ec4 <- data$EC4
smooth_ec4 <- smooth_data(raw_ec4, 0.1, 2000)
ec4_data <- data.frame("Date" = dates,
"Raw" = raw_ec4,
"Smooth" = smooth_ec4)
runApp('app-master.R')
